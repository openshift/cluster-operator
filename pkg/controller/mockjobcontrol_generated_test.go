// Code generated by MockGen. DO NOT EDIT.
// Source: ./jobcontrol.go

// Package controller is a generated GoMock package.
package controller

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/batch/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
)

// MockJobControl is a mock of JobControl interface
type MockJobControl struct {
	ctrl     *gomock.Controller
	recorder *MockJobControlMockRecorder
}

// MockJobControlMockRecorder is the mock recorder for MockJobControl
type MockJobControlMockRecorder struct {
	mock *MockJobControl
}

// NewMockJobControl creates a new mock instance
func NewMockJobControl(ctrl *gomock.Controller) *MockJobControl {
	mock := &MockJobControl{ctrl: ctrl}
	mock.recorder = &MockJobControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobControl) EXPECT() *MockJobControlMockRecorder {
	return m.recorder
}

// OnAdd mocks base method
func (m *MockJobControl) OnAdd(obj interface{}) {
	m.ctrl.Call(m, "OnAdd", obj)
}

// OnAdd indicates an expected call of OnAdd
func (mr *MockJobControlMockRecorder) OnAdd(obj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAdd", reflect.TypeOf((*MockJobControl)(nil).OnAdd), obj)
}

// OnUpdate mocks base method
func (m *MockJobControl) OnUpdate(oldObj, newObj interface{}) {
	m.ctrl.Call(m, "OnUpdate", oldObj, newObj)
}

// OnUpdate indicates an expected call of OnUpdate
func (mr *MockJobControlMockRecorder) OnUpdate(oldObj, newObj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockJobControl)(nil).OnUpdate), oldObj, newObj)
}

// OnDelete mocks base method
func (m *MockJobControl) OnDelete(obj interface{}) {
	m.ctrl.Call(m, "OnDelete", obj)
}

// OnDelete indicates an expected call of OnDelete
func (mr *MockJobControlMockRecorder) OnDelete(obj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDelete", reflect.TypeOf((*MockJobControl)(nil).OnDelete), obj)
}

// ControlJobs mocks base method
func (m *MockJobControl) ControlJobs(ownerKey string, owner v11.Object, buildNewJob bool, jobFactory JobFactory) (JobControlResult, *v1.Job, error) {
	ret := m.ctrl.Call(m, "ControlJobs", ownerKey, owner, buildNewJob, jobFactory)
	ret0, _ := ret[0].(JobControlResult)
	ret1, _ := ret[1].(*v1.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ControlJobs indicates an expected call of ControlJobs
func (mr *MockJobControlMockRecorder) ControlJobs(ownerKey, owner, buildNewJob, jobFactory interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlJobs", reflect.TypeOf((*MockJobControl)(nil).ControlJobs), ownerKey, owner, buildNewJob, jobFactory)
}

// ObserveOwnerDeletion mocks base method
func (m *MockJobControl) ObserveOwnerDeletion(ownerKey string) {
	m.ctrl.Call(m, "ObserveOwnerDeletion", ownerKey)
}

// ObserveOwnerDeletion indicates an expected call of ObserveOwnerDeletion
func (mr *MockJobControlMockRecorder) ObserveOwnerDeletion(ownerKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveOwnerDeletion", reflect.TypeOf((*MockJobControl)(nil).ObserveOwnerDeletion), ownerKey)
}

// GetJobPrefix mocks base method
func (m *MockJobControl) GetJobPrefix() string {
	ret := m.ctrl.Call(m, "GetJobPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJobPrefix indicates an expected call of GetJobPrefix
func (mr *MockJobControlMockRecorder) GetJobPrefix() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobPrefix", reflect.TypeOf((*MockJobControl)(nil).GetJobPrefix))
}

// MockJobOwnerControl is a mock of JobOwnerControl interface
type MockJobOwnerControl struct {
	ctrl     *gomock.Controller
	recorder *MockJobOwnerControlMockRecorder
}

// MockJobOwnerControlMockRecorder is the mock recorder for MockJobOwnerControl
type MockJobOwnerControlMockRecorder struct {
	mock *MockJobOwnerControl
}

// NewMockJobOwnerControl creates a new mock instance
func NewMockJobOwnerControl(ctrl *gomock.Controller) *MockJobOwnerControl {
	mock := &MockJobOwnerControl{ctrl: ctrl}
	mock.recorder = &MockJobOwnerControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobOwnerControl) EXPECT() *MockJobOwnerControlMockRecorder {
	return m.recorder
}

// GetOwnerKey mocks base method
func (m *MockJobOwnerControl) GetOwnerKey(owner v11.Object) (string, error) {
	ret := m.ctrl.Call(m, "GetOwnerKey", owner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerKey indicates an expected call of GetOwnerKey
func (mr *MockJobOwnerControlMockRecorder) GetOwnerKey(owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerKey", reflect.TypeOf((*MockJobOwnerControl)(nil).GetOwnerKey), owner)
}

// GetOwner mocks base method
func (m *MockJobOwnerControl) GetOwner(namespace, name string) (v11.Object, error) {
	ret := m.ctrl.Call(m, "GetOwner", namespace, name)
	ret0, _ := ret[0].(v11.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner
func (mr *MockJobOwnerControlMockRecorder) GetOwner(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockJobOwnerControl)(nil).GetOwner), namespace, name)
}

// OnOwnedJobEvent mocks base method
func (m *MockJobOwnerControl) OnOwnedJobEvent(owner v11.Object) {
	m.ctrl.Call(m, "OnOwnedJobEvent", owner)
}

// OnOwnedJobEvent indicates an expected call of OnOwnedJobEvent
func (mr *MockJobOwnerControlMockRecorder) OnOwnedJobEvent(owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOwnedJobEvent", reflect.TypeOf((*MockJobOwnerControl)(nil).OnOwnedJobEvent), owner)
}

// MockJobFactory is a mock of JobFactory interface
type MockJobFactory struct {
	ctrl     *gomock.Controller
	recorder *MockJobFactoryMockRecorder
}

// MockJobFactoryMockRecorder is the mock recorder for MockJobFactory
type MockJobFactoryMockRecorder struct {
	mock *MockJobFactory
}

// NewMockJobFactory creates a new mock instance
func NewMockJobFactory(ctrl *gomock.Controller) *MockJobFactory {
	mock := &MockJobFactory{ctrl: ctrl}
	mock.recorder = &MockJobFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobFactory) EXPECT() *MockJobFactoryMockRecorder {
	return m.recorder
}

// BuildJob mocks base method
func (m *MockJobFactory) BuildJob(name string) (*v1.Job, *v10.ConfigMap, error) {
	ret := m.ctrl.Call(m, "BuildJob", name)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(*v10.ConfigMap)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildJob indicates an expected call of BuildJob
func (mr *MockJobFactoryMockRecorder) BuildJob(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJob", reflect.TypeOf((*MockJobFactory)(nil).BuildJob), name)
}
