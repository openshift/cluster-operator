items:
- machineName: standard-master
  machineHcl: |
    variable "vsphere_user" {}
    variable "vsphere_password" {}
    variable "vsphere_server" {}

    variable "datacenter" {}
    variable "datastore" {}
    variable "resource_pool" {}
    variable "num_cpus" {}
    variable "memory" {}
    variable "vm_template" {}
    variable "network" { default = "VM Network"}
    variable "disk_label" { default = "disk0" }
    variable "disk_size" { default = 10}

    variable "vm_name" {
      type = "string"
    }

    provider "vsphere" {
      version        = "~> 1.5.0"
      user           = "${var.vsphere_user}"
      password       = "${var.vsphere_password}"
      vsphere_server = "${var.vsphere_server}"

      # if you have a self-signed cert
      allow_unverified_ssl = true
    }

    provider "template" {
      version = "~> 1.0.0"
    }

    data "vsphere_datacenter" "dc" {
      name = "${var.datacenter}"
    }

    data "vsphere_datastore" "datastore" {
      name          = "${var.datastore}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_resource_pool" "pool" {
      name          = "${var.resource_pool}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_network" "network" {
      name          = "${var.network}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_virtual_machine" "template" {
      name          = "${var.vm_template}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "template_file" "cloud_provider_config" {
      template = <<EOF
    [Global]
    datacenters = "$${datacenter}"
    insecure-flag = "1" #set to 1 if the vCenter uses a self-signed cert

    [VirtualCenter "$${vsphere_server}"]
            user = "$${user}"
            password = "$${password}"

    [Workspace]
            server = "$${vsphere_server}"
            datacenter = "$${datacenter}"
            folder = "$${resource_pool}"
            default-datastore = "$${datastore}"
            resourcepool-path = "$${resource_pool}"

    [Disk]
            scsicontrollertype = pvscsi

    [Network]
            public-network = "$${network}"
    EOF
      vars {
        vsphere_server = "${var.vsphere_server}"
        datacenter     = "${var.datacenter}"
        user           = "${var.vsphere_user}"
        password       = "${var.vsphere_password}"
        datastore      = "${var.datastore}"
        resource_pool  = "${var.resource_pool}"
        network        = "${var.network}"
      }
    }

    data "template_file" "user_data" {
      template = <<EOF
    #cloud-config
    write_files:
      - path: /tmp/master.sh
        permissions: '0755'
        encoding: base64
        content: |
          $${startup_script}
      - path: /etc/kubernetes/cloud-config/cloud-config.yaml
        permissions: '0600'
        encoding: base64
        content: |
          $${cloud_provider_config}
    runcmd:
      - /tmp/master.sh
    EOF
      vars {
        startup_script = "${base64encode(file("/tmp/machine-startup.sh"))}"
        cloud_provider_config = "${base64encode(data.template_file.cloud_provider_config.rendered)}"
      }
    }

    resource "vsphere_virtual_machine" "master" {
      name             = "${var.vm_name}"
      resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
      datastore_id     = "${data.vsphere_datastore.datastore.id}"

      num_cpus         = "${var.num_cpus}"
      memory           = "${var.memory}"
      guest_id         = "${data.vsphere_virtual_machine.template.guest_id}"
      enable_disk_uuid = "true"

      scsi_type = "${data.vsphere_virtual_machine.template.scsi_type}"

      network_interface {
        network_id   = "${data.vsphere_network.network.id}"
        adapter_type = "${data.vsphere_virtual_machine.template.network_interface_types[0]}"
      }

      disk {
        label            = "${var.disk_label}"
        size             = "${max(var.disk_size, data.vsphere_virtual_machine.template.disks.0.size)}"
        eagerly_scrub    = "${data.vsphere_virtual_machine.template.disks.0.eagerly_scrub}"
        thin_provisioned = "${data.vsphere_virtual_machine.template.disks.0.thin_provisioned}"
      }

      clone {
        template_uuid = "${data.vsphere_virtual_machine.template.id}"
      }

      cdrom {
        client_device = true
      }

     // Copy the private key over so the controller is able to ssh into the nodes.
     provisioner "file" {
       source      = "~/.ssh/vsphere_tmp"
       destination = "~/.ssh/id_rsa"

       connection {
         type        = "ssh"
         private_key = "${file("~/.ssh/vsphere_tmp")}"
         user        = "ubuntu"
         agent       = true
       }
     }

      vapp {
        properties {
          hostname = "${var.vm_name}"
          "user-data" = "${base64encode(data.template_file.user_data.rendered)}"
          "public-keys" = "${file("~/.ssh/vsphere_tmp.pub")}"
        }
      }
    }

    output "ip_address" {
      value = "${vsphere_virtual_machine.master.default_ip_address}"
    }
- machineName: standard-node
  machineHcl: |
    variable "vsphere_user" {}
    variable "vsphere_password" {}
    variable "vsphere_server" {}

    variable "datacenter" {}
    variable "datastore" {}
    variable "resource_pool" {}
    variable "num_cpus" {}
    variable "memory" {}
    variable "vm_template" {}
    variable "network" { default = "VM Network"}
    variable "disk_label" { default = "disk0" }
    variable "disk_size" { default = 10}

    variable "vm_name" {
      type = "string"
    }

    provider "vsphere" {
      version        = "~> 1.5.0"
      user           = "${var.vsphere_user}"
      password       = "${var.vsphere_password}"
      vsphere_server = "${var.vsphere_server}"

      # if you have a self-signed cert
      allow_unverified_ssl = true
    }

    provider "template" {
      version = "~> 1.0.0"
    }

    data "vsphere_datacenter" "dc" {
      name = "${var.datacenter}"
    }

    data "vsphere_datastore" "datastore" {
      name          = "${var.datastore}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_resource_pool" "pool" {
      name          = "${var.resource_pool}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_network" "network" {
      name          = "${var.network}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    data "vsphere_virtual_machine" "template" {
      name          = "${var.vm_template}"
      datacenter_id = "${data.vsphere_datacenter.dc.id}"
    }

    // Generate cloud-config for VM startup
    data "template_file" "user_data" {
      template = <<EOF
    #cloud-config
    write_files:
      - content: |
          $${startup_script}
        path: /tmp/node.sh
        permissions: '0755'
    runcmd:
      - /tmp/node.sh
    EOF
      vars {
        startup_script = "${indent(6, file("/tmp/machine-startup.sh"))}"
      }
    }

    resource "vsphere_virtual_machine" "node" {
      name             = "${var.vm_name}"
      resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
      datastore_id     = "${data.vsphere_datastore.datastore.id}"

      num_cpus         = "${var.num_cpus}"
      memory           = "${var.memory}"
      guest_id         = "${data.vsphere_virtual_machine.template.guest_id}"
      enable_disk_uuid = "true"

      scsi_type = "${data.vsphere_virtual_machine.template.scsi_type}"

      network_interface {
        network_id   = "${data.vsphere_network.network.id}"
        adapter_type = "${data.vsphere_virtual_machine.template.network_interface_types[0]}"
      }

      disk {
        label            = "${var.disk_label}"
        size             = "${max(var.disk_size, data.vsphere_virtual_machine.template.disks.0.size)}"
        eagerly_scrub    = "${data.vsphere_virtual_machine.template.disks.0.eagerly_scrub}"
        thin_provisioned = "${data.vsphere_virtual_machine.template.disks.0.thin_provisioned}"
      }

      clone {
        template_uuid = "${data.vsphere_virtual_machine.template.id}"
      }

      cdrom {
        client_device = true
      }

      // These properties are defined in the Ubuntu cloud image OVA.
      vapp {
        properties {
          hostname = "${var.vm_name}"
          // This data has to be base64 encoded because OVF uses XML, and this
          // has to be a valid XML attribute. Cloud-init on the other side will
          // base64decode it.
          "user-data" = "${base64encode(data.template_file.user_data.rendered)}"
          "public-keys" = "${file("~/.ssh/authorized_keys")}"
        }
      }
    }

    output "ip_address" {
      value = "${vsphere_virtual_machine.node.default_ip_address}"
    }
